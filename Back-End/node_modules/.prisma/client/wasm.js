
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  gender: 'gender',
  avatar: 'avatar',
  dateOfBirth: 'dateOfBirth',
  regionId: 'regionId',
  majorId: 'majorId',
  bio: 'bio',
  occupation: 'occupation',
  experience: 'experience',
  profileVisibility: 'profileVisibility',
  isBanned: 'isBanned',
  createdAt: 'createdAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  managePost: 'managePost',
  manageUser: 'manageUser',
  canCreateNews: 'canCreateNews',
  canViewReports: 'canViewReports',
  canManageTopicsTags: 'canManageTopicsTags'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  roleId: 'roleId',
  userId: 'userId'
};

exports.Prisma.UserSkillScalarFieldEnum = {
  userId: 'userId',
  skillId: 'skillId',
  level: 'level',
  yearsOfExperience: 'yearsOfExperience'
};

exports.Prisma.FollowScalarFieldEnum = {
  followerId: 'followerId',
  followingId: 'followingId',
  followedAt: 'followedAt'
};

exports.Prisma.MajorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  content: 'content',
  postType: 'postType',
  sourceUrl: 'sourceUrl',
  originalAuthor: 'originalAuthor',
  originalPublishedDate: 'originalPublishedDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  viewCount: 'viewCount',
  moderatedById: 'moderatedById',
  moderatedAt: 'moderatedAt',
  wordCount: 'wordCount',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parentCommentId: 'parentCommentId',
  isDeleted: 'isDeleted',
  status: 'status'
};

exports.Prisma.ReactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  commentId: 'commentId',
  reactionType: 'reactionType',
  createdAt: 'createdAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  idReport: 'idReport',
  idUser: 'idUser',
  idPost: 'idPost',
  idComment: 'idComment',
  reason: 'reason',
  reportAt: 'reportAt',
  status: 'status',
  actionTaken: 'actionTaken',
  resolvedByIdUser: 'resolvedByIdUser',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  idNotification: 'idNotification',
  idUser: 'idUser',
  type: 'type',
  content: 'content',
  relatedEntityId: 'relatedEntityId',
  relatedEntityType: 'relatedEntityType',
  triggeredByIdUser: 'triggeredByIdUser',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  idMessage: 'idMessage',
  idSender: 'idSender',
  idReceiver: 'idReceiver',
  content: 'content',
  sentAt: 'sentAt',
  readAt: 'readAt',
  isDeletedBySender: 'isDeletedBySender',
  isDeletedByReceiver: 'isDeletedByReceiver'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  idAttachment: 'idAttachment',
  idMessage: 'idMessage',
  fileUrl: 'fileUrl',
  fileName: 'fileName',
  fileType: 'fileType',
  fileSize: 'fileSize',
  uploadedAt: 'uploadedAt',
  thumbnailUrl: 'thumbnailUrl'
};

exports.Prisma.TopicScalarFieldEnum = {
  idTopic: 'idTopic',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  idUserCreated: 'idUserCreated'
};

exports.Prisma.TagScalarFieldEnum = {
  idTag: 'idTag',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  idUserCreated: 'idUserCreated'
};

exports.Prisma.PostTagScalarFieldEnum = {
  idPost: 'idPost',
  idTag: 'idTag'
};

exports.Prisma.TopicTagScalarFieldEnum = {
  idTopic: 'idTopic',
  idTag: 'idTag'
};

exports.Prisma.BadWordScalarFieldEnum = {
  idBadWord: 'idBadWord',
  word: 'word',
  addedBy: 'addedBy',
  createdAt: 'createdAt'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.ExperienceLevel = exports.$Enums.ExperienceLevel = {
  FRESHER: 'FRESHER',
  JUNIOR: 'JUNIOR',
  MIDDLE: 'MIDDLE',
  SENIOR: 'SENIOR',
  LEAD: 'LEAD',
  PRINCIPAL: 'PRINCIPAL',
  MANAGER: 'MANAGER',
  DIRECTOR: 'DIRECTOR'
};

exports.PostType = exports.$Enums.PostType = {
  DISCUSSION: 'DISCUSSION',
  QUESTION: 'QUESTION',
  NEWS: 'NEWS',
  TUTORIAL: 'TUTORIAL'
};

exports.PostStatus = exports.$Enums.PostStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  HIDDEN: 'HIDDEN',
  DELETED: 'DELETED'
};

exports.CommentStatus = exports.$Enums.CommentStatus = {
  ACTIVE: 'ACTIVE',
  HIDDEN: 'HIDDEN',
  DELETED: 'DELETED'
};

exports.ReactionType = exports.$Enums.ReactionType = {
  LIKE: 'LIKE',
  DISLIKE: 'DISLIKE',
  LOVE: 'LOVE',
  LAUGH: 'LAUGH'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  RESOLVED: 'RESOLVED',
  DISMISSED: 'DISMISSED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  NEW_COMMENT_ON_POST: 'NEW_COMMENT_ON_POST',
  NEW_REACTION_ON_POST: 'NEW_REACTION_ON_POST',
  NEW_REACTION_ON_COMMENT: 'NEW_REACTION_ON_COMMENT',
  NEW_FOLLOW: 'NEW_FOLLOW',
  POST_MENTION: 'POST_MENTION',
  COMMENT_MENTION: 'COMMENT_MENTION',
  REPORT_STATUS_UPDATE: 'REPORT_STATUS_UPDATE',
  ADMIN_MESSAGE: 'ADMIN_MESSAGE'
};

exports.NotificationEntityType = exports.$Enums.NotificationEntityType = {
  POST: 'POST',
  COMMENT: 'COMMENT',
  USER: 'USER',
  REPORT: 'REPORT',
  MESSAGE: 'MESSAGE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  UserRole: 'UserRole',
  UserSkill: 'UserSkill',
  Follow: 'Follow',
  Major: 'Major',
  Post: 'Post',
  Comment: 'Comment',
  Reaction: 'Reaction',
  Report: 'Report',
  Notification: 'Notification',
  Message: 'Message',
  Attachment: 'Attachment',
  Topic: 'Topic',
  Tag: 'Tag',
  PostTag: 'PostTag',
  TopicTag: 'TopicTag',
  BadWord: 'BadWord',
  Region: 'Region',
  Skill: 'Skill'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
